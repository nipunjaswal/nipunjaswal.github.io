<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>VAPT.IO - Home of the Next Gen Cyber Ninja</title>
    <link>/</link>
    <description>Recent content on VAPT.IO - Home of the Next Gen Cyber Ninja</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 26 Aug 2018 16:53:00 +0530</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Subjects that Help Building Cyber Security Skills while you are Studying</title>
      <link>/posts/2018/08/subjects-that-help-building-cyber-security-skills-while-you-are-studying/</link>
      <pubDate>Sun, 26 Aug 2018 16:53:00 +0530</pubDate>
      
      <guid>/posts/2018/08/subjects-that-help-building-cyber-security-skills-while-you-are-studying/</guid>
      <description>Whats up guys eh, long time and i haven&amp;rsquo;t posted anything recently. Yeah i know i have been busy with a ton of work at the company where we have been doing something amazing almost every day. Recently, we have been working on various cutting-edge vulnerability research and product development projects and my end of the day is like never-ending. Anyways, there have been many students asking me one common question every time i login to facebook or any other social media that &amp;ldquo;I am a B.</description>
    </item>
    
    <item>
      <title>Art of Shellcoding: Basic AES Shellcode Crypter</title>
      <link>/posts/2018/02/art-of-shellcoding-basic-aes-shellcode-crypter/</link>
      <pubDate>Wed, 28 Feb 2018 17:37:00 +0530</pubDate>
      
      <guid>/posts/2018/02/art-of-shellcoding-basic-aes-shellcode-crypter/</guid>
      <description>In this post, we will design a shellcode crypter which will encrypt the shellcode and then decrypt the encrypted shellcode and run it dynamically. The libraries we will be using for encryption will be mcrypt, and the shellcode encryption schema is Rijndael-128(AES).  We will design the crypter in C programming language. The shellcode we will be using for this exercise will be an execve stack based shellcode. Following is the code of the crypter:</description>
    </item>
    
    <item>
      <title>Art of Shellcoding: Polymorphic Shellcodes</title>
      <link>/posts/2018/02/art-of-shellcoding-polymorphic-shellcodes/</link>
      <pubDate>Wed, 28 Feb 2018 15:01:00 +0530</pubDate>
      
      <guid>/posts/2018/02/art-of-shellcoding-polymorphic-shellcodes/</guid>
      <description>Polymorphic shellcodes help defeat pattern matching. A great shellcode will combine not only the polymorphism in the shellcode but will combine a variety of techniques including encoding, encryption, and polymorphism. In this post, we will take up 3 different shellcodes and will convert them into the polymorphic ones. A polymorphic shellcode will not differ in the functionality, but we will use a variety of other instructions. This means that polymorphism is nothing but doing the same thing using a variety of different instructions.</description>
    </item>
    
    <item>
      <title>Art of Shellcoding: Metasploit Read File Payload Analysis</title>
      <link>/posts/2018/02/art-of-shellcoding-metasploit-read-file-payload-analysis/</link>
      <pubDate>Sat, 24 Feb 2018 02:16:00 +0530</pubDate>
      
      <guid>/posts/2018/02/art-of-shellcoding-metasploit-read-file-payload-analysis/</guid>
      <description>Today, we will be looking at Metasploit&amp;rsquo;s linux/x86/read_file payload. In this post, we will uncover how this payload works internally when it tries to read the /etc/passwd file. We will use GDB-Peda for our analysis. Using msfvenom, i created a file, i.e., read. Elf and while i was generating the file i used PATH value as /etc/passwd.  Therefore, when the file is made to execute, it will read the contents of the /etc/passwd and will display it on the screen as shown in the following image:</description>
    </item>
    
    <item>
      <title>Art of ShellCoding: Metasploit IPv6 Reverse TCP Shellcode Analysis</title>
      <link>/posts/2018/02/art-of-shellcoding-metasploit-ipv6-reverse-tcp-shellcode-analysis/</link>
      <pubDate>Fri, 23 Feb 2018 00:24:00 +0530</pubDate>
      
      <guid>/posts/2018/02/art-of-shellcoding-metasploit-ipv6-reverse-tcp-shellcode-analysis/</guid>
      <description>Most of us have worked a lot with IPv4 payloads and shellcodes. Let us see how different is Metasploit IPv6 Shellcode and how does it work. In this post, we will make use of libemu to conduct out our analysis on the IPV6 Reverse TCP shellcode. We will also use strace to aid our analysis. Throughout the analysis, our agenda is to figure out the key differences between an IPv4 and IPv6 shellcode.</description>
    </item>
    
    <item>
      <title>Art of ShellCoding: Metasploit Add User Payload Analysis</title>
      <link>/posts/2018/02/art-of-shellcoding-metasploit-add-user-payload-analysis/</link>
      <pubDate>Sat, 10 Feb 2018 01:15:00 +0530</pubDate>
      
      <guid>/posts/2018/02/art-of-shellcoding-metasploit-add-user-payload-analysis/</guid>
      <description>In the previous post, we saw how we can encode the shellcode with our customized encoding schemes. In this post, we will see how some of the famous shellcodes from the metasploit framework work. We will analyze three different shellcodes using different techniques and tools in this mini shellcode analysis series. In this post, we will examine linux/x86/adduser shellcode with ndisasm and will see how the stuff works behind the scene.</description>
    </item>
    
    <item>
      <title>Art of Shellcoding: The MultiEncoder Shellcode</title>
      <link>/posts/2018/02/art-of-shellcoding-the-multiencoder-shellcode/</link>
      <pubDate>Tue, 06 Feb 2018 17:10:00 +0530</pubDate>
      
      <guid>/posts/2018/02/art-of-shellcoding-the-multiencoder-shellcode/</guid>
      <description>Dear Readers, Hope you all are doing great. In the previous post, we saw how we could create a shellcode for egghunting and ended up creating one of the shortest egghunter shellcode with just under 12 bytes. In this post, we will only work on encoding the shellcode by combining 3 different encoding schemes. The shellcode we will choose to demo our custom encoder will be a simple /bin/sh shell invoking shellcode.</description>
    </item>
    
    <item>
      <title>Art of Shellcoding: Cracking Eggs with EggHunters</title>
      <link>/posts/2018/01/art-of-shellcoding-cracking-eggs-with-egghunters/</link>
      <pubDate>Tue, 16 Jan 2018 08:00:00 +0530</pubDate>
      
      <guid>/posts/2018/01/art-of-shellcoding-cracking-eggs-with-egghunters/</guid>
      <description>Dear Readers, thank you for your overwhelming response to the previous post on reverse TCP shellcode. Last time, we wrote one of the smallest reverse TCP shellcodes of all time. This post advances onto an interesting concept called the Egg Hunter Shellcode. So, what is an egg hunter shellcode? For those interested in exploit development, they often come across a problem of limited space for the shellcode to execute. I remember the first exploit i wrote was a POC for SamSpade tool.</description>
    </item>
    
    <item>
      <title>Art of Shellcoding:  Tale of the Smallest Reverse TCP Shellcode</title>
      <link>/posts/2018/01/art-of-shellcoding-tale-of-the-smallest-reverse-tcp-shellcode/</link>
      <pubDate>Fri, 05 Jan 2018 20:25:00 +0530</pubDate>
      
      <guid>/posts/2018/01/art-of-shellcoding-tale-of-the-smallest-reverse-tcp-shellcode/</guid>
      <description>Modern Ninja :)    Hey Folks, Hope you guys are doing great. In the previous article, we saw how we can create a bind TCP shellcode, reduce its enormous length from 108 bytes to merely 80 bytes by making use of strategically placed instructions, register re-use, single byte instructions and much more. We also saw how we can create a wrapper in python which will help us modify the shellcode and make it usable for any port of choice.</description>
    </item>
    
    <item>
      <title>Art of Shellcoding: The Saga of Bind TCP Shell</title>
      <link>/posts/2018/01/art-of-shellcoding-the-saga-of-bind-tcp-shell/</link>
      <pubDate>Tue, 02 Jan 2018 14:24:00 +0530</pubDate>
      
      <guid>/posts/2018/01/art-of-shellcoding-the-saga-of-bind-tcp-shell/</guid>
      <description>Dear Readers, we all in the infosec community use bind TCP shell almost on a daily basis. I too have seen many people copying shellcodes blindly from the internet and just pasting them into the exploits without knowing what those shellcodes might be carrying.

Today, we will uncover the working of bind TCP shell and based on the analysis, we will try to develop one ourselves. If you are not familiar with the assembly, Enroll yourself into SLAE course from SecurityTube, its one of the best classes available out there and i am able to write this post based on the advanced knowledge i gained from the course itself.</description>
    </item>
    
  </channel>
</rss>